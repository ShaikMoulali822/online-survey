package com.fullstack.cbit.controller;

import com.fullstack.cbit.exception.UserNotFoundException;
import com.fullstack.cbit.model.User;
import com.fullstack.cbit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin("http://localhost:3000/")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @PostMapping("/adduser")
    User newUser(@RequestBody User newUser) {
        return userRepository.save(newUser);
    }

    @GetMapping("/getUsers")
    List<User> getUser() {
        return userRepository.findAll();
    }

    @PutMapping("/update/{id}")
    User updateUser(@RequestBody User newUser, @PathVariable Long id) {
        return userRepository.findById(id).map(user -> {
            user.setFirstName(newUser.getFirstName());
            user.setLastName(newUser.getLastName());
            user.setFatherName(newUser.getFatherName());
            user.setMotherName(newUser.getMotherName());
            user.setDate(newUser.getDate());
            user.setGender(newUser.getGender());
            user.setPassOut(newUser.getPassOut());
            user.setCollegeName(newUser.getCollegeName());
            user.setMobileNo(newUser.getMobileNo());
            user.setAadharNo(newUser.getAadharNo());
            user.setEmail(newUser.getEmail());
            user.setCourse(newUser.getCourse());
            user.setBranchName(newUser.getBranchName());
            user.setRollNo(newUser.getRollNo());




            return userRepository.save(user);
        }).orElseThrow(() -> new UserNotFoundException(id));
    }

    @GetMapping("/finduser/{id}")
    User getUserById(@PathVariable Long id) {
        return userRepository.findById(id)

                .orElseThrow(() -> new UserNotFoundException(id));
    }


    @DeleteMapping("/delete/{id}")
    String deleteUser(@PathVariable Long id) {
        if (!userRepository.existsById(id)) {
            throw new UserNotFoundException(id);
        }
        userRepository.deleteById(id);
        return "User with id" + id + "has been deleted.";


    }
}